target C {
    threading: false,
    build: "../scripts/build_nrf_unix.sh"
};

import Pump from "lib/Pump.lf"
import Moisture from "lib/SensorADC.lf"

preamble {=

=}

reactor FSM(error:int(10)) {
    input level:int;
    input moisture:int;
    state low:int(300);
    state high:int(300);
    output water:bool;

    reaction(startup) {=
        self->low = level - self->error;
        self->high = level + self->error;
    =}

    initial mode IDLE {
        reaction(moisture) -> WATERING, water {=
            if (moisture < low) {
                lf_set_mode(WATERING);
                lf_set(water, true);
            }
        =}
    }

    mode WATERING {
        reaction(moisture) -> IDLE, water {=
            self->low = level - self->error;
            self->high = level + self->error;
            if (moisture > high) {
                lf_set_mode(IDLE);
                lf_set(water, false);
            }
        =}
    }
}

main reactor {
    timer t(0, 100 msec);
    state toggle:bool(false);
    fsm = new FSM(error = 10);
    moistureSense = new Moisture();
    pump = new Pump();

    reaction(t) -> moistureSense.trigger {=
        lf_set(moistureSense.trigger, toggle);
        self->toggle = !self->toggle;
    =}

    reaction(moistureSense.moisture) -> fsm.moisture {=
        lf_set(fsm.moisture, moistureSense.moisture);
    =}

    reaction(fsm.water) -> pump.water {=
        lf_set(pump.water, fsm.water);
    =}
}


