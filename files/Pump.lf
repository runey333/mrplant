target C;

preamble{=
    #include "nrfx_gpiote.h"
    #include "nrfx_saadc.h"
    #include "nrfx_pwm.h"
    
    PWM_PIN = NRF_GPIO_PIN_MAP(0,4);

    nrfx_pwm_t m_pwm0 = NRFX_PWM_INSTANCE(0);

    bool pump_initialized = false;

    void init_pwm(void)
    {
        uint32_t err_code;
        // Declare a configuration structure and use a macro to instantiate it with default parameters.
        nrfx_pwm_config_t pwm_config = NRFX_PWM_DEFAULT_CONFIG;

        // We must override some of the parameters:
        pwm_config.output_pins[0] = PWM_PIN; // Connect PIN_5 on the nRF52840 DK to PWM Channel 0
        // pwm_config.output_pins[1] = LED_2; // Connect LED_2 on the nRF52840 DK to PWM Channel 1
        // pwm_config.output_pins[2] = LED_3; // Connect LED_3 on the nRF52840 DK to PWM Channel 2
        // pwm_config.output_pins[3] = LED_4; // Connect LED_4 on the nRF52840 DK to PWM Channel 3
        pwm_config.top_value    = 100; // Make PWM count from 0 - 100
        pwm_config.load_mode    = NRF_PWM_LOAD_INDIVIDUAL; // Use individual duty cycle for each PWM channel
        
        // Pass config structure into driver init() function 
        err_code = nrfx_pwm_init(&m_pwm0, &pwm_config, NULL);
        APP_ERROR_CHECK(err_code);

        pump_initialized = true;
    }

    static nrf_pwm_values_individual_t pwm_duty_cycle_values = 
    {
        .channel_0 = 50, //< Duty cycle value for channel 0.
        .channel_1 = 0, //< Duty cycle value for channel 1.
        .channel_2 = 0, //< Duty cycle value for channel 2.
        .channel_3 = 0  //< Duty cycle value for channel 3.
    };

    static nrf_pwm_sequence_t pwm_sequence =
    {
        .values.p_individual = &pwm_duty_cycle_values,
        .length          = (sizeof(pwm_duty_cycle_values) / sizeof(uint16_t)),
        .repeats         = 0,
        .end_delay       = 0
    };



    
=}

reactor Pump {
    input water:bool;
    output watering:bool;

    reaction(startup){=
        if (!pump_initialized) {
            init_pwm();
        }
    =}

    reaction(water) -> watering{=
        if(water->value) {
            pwm_duty_cycle_values.channel_0 = 50; // 50% duty cycle
            nrfx_pwm_simple_playback(&m_pwm0, &pwm_sequence, 1, NRFX_PWM_FLAG_LOOP);
            lf_set(watering,true);
        } else {
            pwm_duty_cycle_values.channel_0 = 0; // PWM turned off
            nrfx_pwm_simple_playback(&m_pwm0, &pwm_sequence, 1, NRFX_PWM_FLAG_LOOP);
            lf_set(watering,false);
        }
    =}
}