target C;

reactor FSM(error:int(100)) {

    input moisture:int;
    state low:int(300);
    state high:int(300);
    output water:bool;
    timer t(0, 3000 msec);

    
    initial mode IDLE {
        reaction(startup) {=
            self->low = MOISTURE_LEVEL - self->error;
            self->high = MOISTURE_LEVEL + self->error;
            printf("IDLE\tLOW: %d\tHIGH: %d\n", self->low, self->high);
            // printf("IDLE\n");
            // printf("LOW: %d\n", self->low);
            // printf("HIGH: %d\n", self->high);
        =}
        reaction(moisture) -> WATERING, water {=
            if (moisture->value < self->low) {
                lf_set_mode(WATERING);
                lf_set(water, true);
            } else {
                lf_set(water, false);
            }
        =}
        reaction(t) {=
            self->low = MOISTURE_LEVEL - self->error;
            self->high = MOISTURE_LEVEL + self->error;
            printf("MOISTURE SET: %d\n", MOISTURE_LEVEL);
            printf("IDLE\n");
            //printf("LOW: %d\n", self->low);
            //printf("HIGH: %d\n", self->high);
        =}
    }

    mode WATERING {
        reaction(startup) {=
            self->low = MOISTURE_LEVEL - self->error;
            self->high = MOISTURE_LEVEL + self->error;
            printf("WATERING\tLOW: %d\tHIGH: %d\n", self->low, self->high);
            //printf("LOW: %d\n", self->low);
            //printf("HIGH: %d\n", self->high);
        =}
        reaction(moisture) -> IDLE, water {=
            if (moisture->value > self->high) {
                lf_set_mode(IDLE);
                lf_set(water, false);
            } else {
                lf_set(water, true);
            }
        =}
        reaction(t) {=
            self->low = MOISTURE_LEVEL - self->error;
            self->high = MOISTURE_LEVEL + self->error;
            printf("MOISTURE SET: %d\n", MOISTURE_LEVEL);
            printf("WATERING\n");
            //printf("LOW: %d\n", self->low);
            //printf("HIGH: %d\n", self->high);
        =}
    }
}
